/*
 * Created on Mar 31, 2010
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 * Copyright @2010 the original author or authors.
 */
package org.fest.keyboard.mapping;

import java.awt.Rectangle;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import javax.swing.table.DefaultTableModel;

import static org.fest.keyboard.mapping.CharMapping.newCharMapping;

/**
 * Understands the application's main window.
 *
 * @author Alex Ruiz
 */
public class MainFrame extends javax.swing.JFrame {

  private static final long serialVersionUID = 1L;

  private final ConcurrentMap<String, Integer> mappings = new ConcurrentHashMap<String, Integer>();

  /** Creates new form MainFrame */
  public MainFrame() {
    initComponents();
  }

  @SuppressWarnings({ "serial", "unchecked" })
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    charLabel = new javax.swing.JLabel();
    charTextField = new javax.swing.JTextField();
    mappingPanel = new javax.swing.JPanel();
    tableScrollPane = new javax.swing.JScrollPane();
    mappingTable = new javax.swing.JTable();
    deleteMappingButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Keyboard Mappings");
    setMinimumSize(new java.awt.Dimension(260, 240));
    setName("mainFrame"); // NOI18N

    charLabel.setText("Enter the character to map:");

    charTextField.setDocument(new MaxLengthDocument());
    charTextField.setName("charTextField"); // NOI18N
    charTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        charEntered(evt);
      }
    });

    mappingPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow));

    mappingTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Character", "Key", "Modifiers"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    mappingTable.setName("mappingTable"); // NOI18N
    mappingTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    tableScrollPane.setViewportView(mappingTable);

    deleteMappingButton.setMnemonic('D');
    deleteMappingButton.setText("Delete");
    deleteMappingButton.setEnabled(false);
    deleteMappingButton.setName("deleteMappingButton"); // NOI18N
    deleteMappingButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteMapping(evt);
      }
    });

    javax.swing.GroupLayout mappingPanelLayout = new javax.swing.GroupLayout(mappingPanel);
    mappingPanel.setLayout(mappingPanelLayout);
    mappingPanelLayout.setHorizontalGroup(
      mappingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mappingPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(mappingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
          .addComponent(deleteMappingButton))
        .addContainerGap())
    );
    mappingPanelLayout.setVerticalGroup(
      mappingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mappingPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(deleteMappingButton)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(mappingPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(charTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
          .addComponent(charLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(mappingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(charLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(charTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void charEntered(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_charEntered
    try {
      CharMapping mapping = newCharMapping(evt);
      removeMappingIfPresent(mapping);
      addMapping(mapping);
    } catch (MappingNotFoundError ignored) {}
  }//GEN-LAST:event_charEntered

  private void deleteMapping(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMapping
    // TODO add your handling code here:
  }//GEN-LAST:event_deleteMapping

  private void removeMappingIfPresent(CharMapping mapping) {
    String character = mapping.character;
    if (!mappings.containsKey(character)) return;
    int rowIndex = mappings.remove(character);
    mappingTableModel().removeRow(rowIndex);
  }

  private void addMapping(CharMapping mapping) {
    mappingTableModel().addRow(new Object[] { mapping.character, mapping.keyCode, mapping.modifier });
    int lastRow = selectAndScrollToLastRow();
    updateMappingDeleteButton();
    mappings.put(mapping.character, lastRow);
  }

  private int selectAndScrollToLastRow() {
    int lastRowIndex = mappingTableModel().getRowCount() - 1;
    if (lastRowIndex < 0) return lastRowIndex;
    scrollToRow(lastRowIndex);
    mappingTable.setRowSelectionInterval(lastRowIndex, lastRowIndex);
    return lastRowIndex;
  }

  private void scrollToRow(int row) {
    Rectangle rect = mappingTable.getCellRect(row, 0, true);
    mappingTable.scrollRectToVisible(rect);
  }

  private DefaultTableModel mappingTableModel() {
    return (DefaultTableModel) mappingTable.getModel();
  }

  private void updateMappingDeleteButton() {
    deleteMappingButton.setEnabled(mappingTable.getRowCount() > 0);
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel charLabel;
  private javax.swing.JTextField charTextField;
  private javax.swing.JButton deleteMappingButton;
  private javax.swing.JPanel mappingPanel;
  private javax.swing.JTable mappingTable;
  private javax.swing.JScrollPane tableScrollPane;
  // End of variables declaration//GEN-END:variables
}
